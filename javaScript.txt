1.'number' + 3 + 3 Оскільки 'namber' буде рядок, а додавання рядків - конкатинація. Результат number33;
2. null + 3 - відбувається призведення типу null до числа 0 і додавання двох чисел 0 та 3. Результат 3.
3. 5 && "qwerty" - && (оператор І) - повертає true, якщо обидва операнди є true, інакше повертає false. Якщо всі значення 
істинні - повертається останнє обчислене значення. І число 5 , і рядок "qwerty" призводяться до true.Результат qwerty.
4. +'40' + +'2' + "hillel"; тут відбувається призведення рядка '40' та '2' до числа, оскільки перед ними стоїть унарний мінус,
далі арифметична дія 40+2, о потім додавання рядків - конкатинація. Результат 42hillel;
5.'10' - 5 === 6; === оператор строгої рівності, '10' призводиться до числа 10 і далі арифметична дія 10-5. 5 не дорівнює 6.
Результат false.
6.true + false - true призводиться до 1 false 0. Результат 1.
7.'4px' - 3 - перший вираз це рядок, а другий число. Ми не можемо відняти рядок від числа. Результат NaN.
8. '4' - 3 - Js завжди намагається привести все до числа і рядок у вигдяді числа призводиться до числа ('4' призводиться до 4), далі 
виконується математична дія віднімання. Результат 1. 
9.'6' + 3 ** 0; правоасоціативна операція - 3 підносимо до степеню 0 - це 1 в результаті. Оскільки '6' - в данному випадку буде рядок, 
а д одавання рядків - конкатинація. Результат 61;
10. 12 / '6' - Js завжди намагається привести все до числа і рядок у вигдяді числа призводиться до числа '12' призводиться до 12 далі 
виконується vатематична дія ділення. Результат 2.
11.'10' + (5 === 6);  Оперіції в дужках більш пріорітетні, ніж без дужок. Спочатку виконуємо їх. === оператор строгої рівності; 
5 не дорівнює 6, отже тут отримаємо false. Далі додавання двох рядків - конкатинація ('10' + false). Результат 10false. 
12. null == '' == оператор не строгої рівності і повертає true, якщо вони рівні, і false - якщо нерівні. Враховує автоматичне приведення 
типів. При не строгій рівності порожність '' призводиться до 0, а null - ні. Результат false. 
13. 3 ** (9 / 3); Оперіції в дужках більш пріорітетні, ніж без дужок. Спочатку виконуємо їх.Отримуємо 3. Далі операція піднесення
до степеня. 3 в степені 3. Результат 27. 

14. !!'false' == !!'true' - ! перетворює true на false, а false на true, !! повертає false до true, а true до false; 
== оператор не строгої рвіності Оскільки рядкове значення 'false' перетворюється на true, і оператор !! повертає значення 'false' в true 
і теж саме із значенням 'true'.Результат true. 

15. 0 || '0' && 1 -  Логічний оператор "АБО" (OR): || - повертає true, якщо хоча б один з операндів є true, інакше повертає false.
Короткий цикл перевірки "або" - виходимо, як тільки знайшли хоч один true. 0 || '0' тут '0' дає true  виходимо з операції з результатом '0'.
Далі '0' && 1 - && логічний оператор "І" (AND): && - повертає true, якщо обидва операнди є true, інакше повертає false, отже тут 
отримаємо 1. Кінцевий результат 1.

16. (+null == false) < 1 - +null повертає в 0, false теж повертається на 0, отже вираз (+null == false) дає true; true повертає в 1; 
1<1 - false. Кінцевий результат false.

17. false && true || true - false && true - отримуємо false - бо одне із начень (false) ложне; далі false || true - отрмуємо true 
(бо один з операндів є true). Кінцевий результат true 
18. false && (false || true) - спершу виконуємо операцію в дужках (false || true) - отрмуємо true (бо один з операндів є true),
далі виконуємо операцію false && true і отримуємо false - бо одне із начень (false) ложне. Кінцевий результат false.     

19. (+null == false) < 1 ** 5 - спершу виконуємо операцію в дужках (+null == false): +null повертає в 0, false теж повертається на 0, 
отже вираз (+null == false) дає true; true повертає в 1; далі виконуємо операцію 1 < 1 ** 5  - правоасоціативна операція , 1 в степені 5
дорівнює 1. Отже 1 < 1 ** 5 - false. false повертає в 0; 1 < 0 - дає false. Кінцевий результат false
 


